[{"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/index.js":"1","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/App.js":"2","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/reportWebVitals.js":"3","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/HomePage.js":"4","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/leaderboard.js":"5","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/gameboard.js":"6","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/CustomWord.js":"7","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/UsernameForm.js":"8","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/base.js":"9","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/NavBar.js":"10"},{"size":534,"mtime":1682722970376,"results":"11","hashOfConfig":"12"},{"size":831,"mtime":1682724487640,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1682476668550,"results":"14","hashOfConfig":"12"},{"size":954,"mtime":1682724459315,"results":"15","hashOfConfig":"12"},{"size":2087,"mtime":1682724472672,"results":"16","hashOfConfig":"12"},{"size":8022,"mtime":1682724628757,"results":"17","hashOfConfig":"12"},{"size":3510,"mtime":1682724543190,"results":"18","hashOfConfig":"12"},{"size":658,"mtime":1682676566946,"results":"19","hashOfConfig":"12"},{"size":547,"mtime":1682677876293,"results":"20","hashOfConfig":"12"},{"size":2094,"mtime":1682721772937,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nske4u",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/index.js",[],[],"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/App.js",[],[],"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/reportWebVitals.js",[],[],"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/HomePage.js",[],[],"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/leaderboard.js",["54"],[],"import React, { useState, useEffect } from 'react';\nimport { db } from '../base';\nimport { collection, query, getDocs } from 'firebase/firestore';\nimport {useNavigate} from 'react-router-dom'\nimport NavBar from './NavBar';\nimport \"./Gameboard.css\"\n\nconst Leaderboard = () => {\n  const [leaderboard, setLeaderboard] = useState([]);\n  const navigate = useNavigate();\n\n  const fetchLeaderBoard = async () => {\n    const q = query(collection(db, \"users\"));\n    const querySnapshot = await getDocs(q);\n\n    let currentLeaderBoard = leaderboard\n    querySnapshot.forEach((doc) => {\n      currentLeaderBoard = [...currentLeaderBoard, doc.data()];\n    });\n\n    setLeaderboard(currentLeaderBoard);\n\n  }\n  useEffect(() => {\n    fetchLeaderBoard();\n  }, []);\n\n  return (\n    <>\n      <div className=\"GameBoard-Container\">\n        <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\n          <NavBar \n            navigateToGameBoard={() => {navigate(\"/HangmanApp/gameboard\")}}\n            navigateToLeaderBoard={() => {navigate(\"/HangmanApp/leaderboard\")}}\n            navigateToChallenge={() => {navigate(\"/HangmanApp/challenge\")}}\n            navigateToHome={() => {navigate(\"/HangmanApp/\")}}/>\n          <div className=\"Gameboard\">\n            <h2>Leaderboard</h2>\n            <table style={{borderCollapse: \"separate\", borderSpacing: \"10px\"}}>\n              <thead>\n                <tr>\n                  <th>Rank</th>\n                  <th>Player Name</th>\n                  <th>Score</th>\n                </tr>\n              </thead>\n              <tbody>\n                {leaderboard\n                .sort((a,b) => {\n                  return a.score < b.score;\n                })\n                .map((player, index) => (\n                  <tr key={player.name}>\n                    <td>{index + 1}</td>\n                    <td>{player.name}</td>\n                    <td>{player.score}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Leaderboard;\n","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/gameboard.js",["55","56","57","58","59"],[],"import React, { useState, useEffect } from \"react\";\nimport {useNavigate} from 'react-router-dom'\nimport UsernameForm from \"./UsernameForm\";\nimport PropTypes from \"prop-types\";\nimport \"./Gameboard.css\";\nimport {db} from '../base';\nimport {collection, addDoc} from 'firebase/firestore'\nimport NavBar from \"./NavBar\";\nimport { decode } from \"base-64\";\n\nconst Gameboard = ({ maxGuesses, onGameOver }) => {\n  const [word, setWord] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [correctGuesses, setCorrectGuesses] = useState([]);\n  const [incorrectGuesses, setInCorrectGuesses] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameResult, setGameResult] = useState(false); // initially game is not won\n  const [isComplete, setIsComplete] = useState(false);\n  const [remainingGuesses, setRemainingGuesses] = useState(maxGuesses);\n  const [username,  setUsername] = useState(\"\");\n  const [gameStatus, setGameStatus] = useState(\"NotStarted\");\n  const [fromUrl, setFromUrl] = useState(false);\n  const [score, setScore] = useState(0);\n  const navigate = useNavigate();\n\n  const [hangmanImages, setHangmanImages] = useState([  \"/HangmanApp/images/0.jpg\",  \"/HangmanApp/images/1.jpg\",  \"/HangmanApp/images/2.jpg\",  \"/HangmanApp/images/3.jpg\",  \"/HangmanApp/images/4.jpg\",  \"/HangmanApp/images/5.jpg\",  \"/HangmanApp/images/6.jpg\",]);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const url_word = urlParams.get('word');\n    if (url_word) {\n      setWord(decode(url_word).toLowerCase());\n      setFromUrl(true);\n    }\n    else if (!word) {\n      fetch(\"https://random-word-api.herokuapp.com/word?number=1\")\n        .then((response) => response.json())\n        .then((data) => setWord(data[0].toLowerCase()))\n        .catch((error) => console.log(error));\n    }\n\n    if(remainingGuesses === 0) {\n      setGameResult(false);\n      setGameOver(true);\n    }\n    else if(remainingGuesses >= 1 && isComplete) {\n      setGameResult(true);\n      setScore(score + remainingGuesses * 10);\n    }\n  }, [guesses, isComplete]);\n\n  useEffect(() => {\n\n  }, [])\n\n  const handleGuess = (event) => {\n    const guess = event.target.value.toLowerCase();\n    const button = event.target;\n\n    if (!guess) {\n      return;\n    }\n\n    let updatedGuesses = guesses;\n    let updatedCorrectGuesses = correctGuesses;\n    let updatedIncorrectGuesses = incorrectGuesses;\n    let updatedRemainingGuesses = remainingGuesses;\n    // let updatedHangmanImages = hangmanImages;\n\n    if (!guesses.includes(guess)) {\n      updatedGuesses = [...updatedGuesses, guess];\n      setGuesses(updatedGuesses);\n\n      if (!word.includes(guess)) {\n        updatedIncorrectGuesses = [...updatedIncorrectGuesses, guess];\n        updatedRemainingGuesses = updatedRemainingGuesses - 1;\n        setInCorrectGuesses(updatedIncorrectGuesses);\n        setRemainingGuesses(updatedRemainingGuesses);\n        score - 10 < 0 ? setScore(0) : setScore(score-10);\n      }\n      else {\n        updatedCorrectGuesses = [...updatedCorrectGuesses, guess];\n        setCorrectGuesses(updatedCorrectGuesses);\n        setScore(score + 10);\n      }\n    }\n\n    // checkWordComplete();\n    let isComplete = word.split(\"\").every((letter) => updatedCorrectGuesses.includes(letter));\n\n    if(updatedRemainingGuesses === 0 && !isComplete) {\n      setGameOver(true);\n      return;\n    }\n\n    if(updatedRemainingGuesses >= 1 && isComplete) {\n      setIsComplete(true);\n      return;\n    }\n\n    button.classList.add(\"disabled\");\n  };\n\n  const handleReset = () => {\n    setWord(\"\");\n    setGuesses([]);\n    setCorrectGuesses([]);\n    setInCorrectGuesses([]);\n    setGameOver(false);\n    setGameResult(false);\n    setIsComplete(false);\n    setRemainingGuesses(maxGuesses);\n    onGameOver(false);\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach((button) => {\n      button.classList.remove(\"disabled\"); // re-enable the buttons\n    });\n    if (fromUrl) {\n      navigate(\"/HangmanApp/gameboard\");\n      window.location.reload();\n    }\n  };\n\n  const renderWord = () => {\n    return word.split(\"\").map((letter, index) => (\n      <div key={index} className=\"Gameboard-letter-box\">\n        {guesses.includes(letter) ? (\n          <span className=\"Gameboard-letter\">{letter}</span>\n        ) : (\n          <span className=\"Gameboard-letter\">_</span>\n        )}\n      </div>\n    ));\n  };\n\n  const handleUsernameSubmit = async () => {\n    if (username.trim() === \"\") {\n      alert(\"Please enter a valid username\");\n      return;\n    }\n    \n    await addDoc(collection(db, \"users\"), {\n      name: username,\n      score: score\n    });\n\n    navigate(\"/HangmanApp/leaderboard\");\n  };\n\n  return (\n    <>\n      <div className=\"GameBoard-Container\">\n        <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\n          <NavBar \n          navigateToGameBoard={() => {navigate(\"/HangmanApp/gameboard\")}}\n          navigateToLeaderBoard={() => {navigate(\"/HangmanApp/leaderboard\")}}\n          navigateToChallenge={() => {navigate(\"/HangmanApp/challenge\")}}\n          navigateToHome={() => {navigate(\"/HangmanApp/\")}}/>\n          <div className=\"GameBoardInfo d-flex justify-content-center align-items-center\">\n            <div className=\"d-flex flex-grow-1 justify-content-center\">\n              <span className=\"px-3 gameboard-info-box\" style={{color: \"darkgray\", marginRight: \"10px\"}}>Chances left: {remainingGuesses}</span>\n              <span className=\"px-3 gameboard-info-box\" style={{color: \"darkgray\"}}>Score: {score}</span>\n            </div>\n          </div>\n          <div className=\"Gameboard\">\n            <div className=\"Hangman\">\n              <img src={hangmanImages[6 - remainingGuesses]} alt=\"Hangman\" style={{backgroundColor: \"black\", borderRadius: \"10px\"}}/>\n            </div>\n            <div className=\"Gameboard-word\">{renderWord()}</div>\n            <div className=\"Gameboard-guesses\">\n              {gameOver ? (\n                <>\n                  <p>Game Lost !!!!!!</p>\n                  <p>The word was \"{word}\".</p>\n                  <p>Score: {score}</p>\n                  <button className=\"btn btn-primary\" onClick={handleReset}>Try Again</button>\n                </>\n              ) : (\n                <>\n                  <div className=\"Gameboard-buttons\">\n                    {Array.from({ length: 26 }, (_, index) => String.fromCharCode(97 + index)).map((letter) => (\n                      <button key={letter} value={letter} onClick={handleGuess} disabled={guesses.includes(letter)}>\n                        {letter}\n                      </button>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n            {gameResult && \n              <div className=\"popup\">\n                <div className=\"popup-content\">\n                  <h2>Congratulations!</h2>\n                  <p>You have guessed the word \"{word}\".</p>\n                  <p>Score: {score}</p>\n                  <span>\n                    <input \n                      type=\"text\" \n                      value={username} \n                      onChange={(e) => setUsername(e.target.value)} \n                      placeholder=\"Enter Name for leaderboard\" \n                      className=\"username-input\" // Add a class name for styling\n                    />\n                    <button onClick={handleUsernameSubmit} className=\"submit-btn\">Save Score</button>\n                  </span>\n                  {fromUrl ?\n                    <button className=\"btn btn-primary\" onClick={handleReset}>Play New Game</button>\n                    :                \n                    <button className=\"btn btn-primary\" onClick={handleReset}>Play Again</button>\n                  }\n                </div>\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nGameboard.propTypes = {\n  maxGuesses: PropTypes.number.isRequired,\n  onGameOver: PropTypes.func.isRequired,\n};\n\nexport default Gameboard;\n","/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/CustomWord.js",[],[],"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/UsernameForm.js",[],[],"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/base.js",[],[],"/home/vkamineni/Documents/LightHall/level3/vikas_hangman/src/components/NavBar.js",[],[],{"ruleId":"60","severity":1,"message":"61","line":26,"column":6,"nodeType":"62","endLine":26,"endColumn":8,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":20},{"ruleId":"64","severity":1,"message":"68","line":21,"column":10,"nodeType":"66","messageId":"67","endLine":21,"endColumn":20},{"ruleId":"64","severity":1,"message":"69","line":21,"column":22,"nodeType":"66","messageId":"67","endLine":21,"endColumn":35},{"ruleId":"64","severity":1,"message":"70","line":26,"column":25,"nodeType":"66","messageId":"67","endLine":26,"endColumn":41},{"ruleId":"60","severity":1,"message":"71","line":50,"column":6,"nodeType":"62","endLine":50,"endColumn":27,"suggestions":"72"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchLeaderBoard'. Either include it or remove the dependency array.","ArrayExpression",["73"],"no-unused-vars","'UsernameForm' is defined but never used.","Identifier","unusedVar","'gameStatus' is assigned a value but never used.","'setGameStatus' is assigned a value but never used.","'setHangmanImages' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'remainingGuesses', 'score', and 'word'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setScore' needs the current value of 'remainingGuesses'.",["74"],{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [fetchLeaderBoard]",{"range":"79","text":"80"},"Update the dependencies array to be: [guesses, isComplete, remainingGuesses, score, word]",{"range":"81","text":"82"},[743,745],"[fetchLeaderBoard]",[2072,2093],"[guesses, isComplete, remainingGuesses, score, word]"]